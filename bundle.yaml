openapi: 3.0.0
info:
  title: Miro-like Collaborative Whiteboard API
  description: API for a collaborative whiteboard application similar to Miro
  version: 1.0.0
paths:
  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /auth/refresh:
    post:
      summary: Refresh access token
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /boards:
    get:
      summary: Get all boards for current user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - createdAt
              - updatedAt
              - lastOpenedAt
              - name
        - name: isFavorite
          in: query
          required: false
          schema:
            type: boolean
        - name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of boards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardsList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new board
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Board created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /boards/{boardId}:
    get:
      summary: Get a board by id
      security:
        - bearerAuth: []
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete a board
      security:
        - bearerAuth: []
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Board deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /boards/{boardId}/favorite:
    put:
      summary: Update a board favorite
      security:
        - bearerAuth: []
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBoardFavorite'
      responses:
        '201':
          description: Board created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /boards/{boardId}/rename:
    put:
      summary: Rename a board
      security:
        - bearerAuth: []
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameBoard'
      responses:
        '201':
          description: Board created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    User:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: string
        email:
          type: string
          format: email
    AuthResponse:
      type: object
      required:
        - accessToken
        - user
      properties:
        accessToken:
          type: string
        user:
          $ref: '#/components/schemas/User'
    Error:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: string
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    Board:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - lastOpenedAt
        - isFavorite
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastOpenedAt:
          type: string
          format: date-time
        isFavorite:
          type: boolean
    BoardsList:
      type: object
      required:
        - list
        - total
        - totalPages
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Board'
        total:
          type: integer
        totalPages:
          type: integer
    UpdateBoardFavorite:
      type: object
      required:
        - isFavorite
      properties:
        isFavorite:
          type: boolean
    RenameBoard:
      type: object
      required:
        - name
      properties:
        name:
          type: string
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
