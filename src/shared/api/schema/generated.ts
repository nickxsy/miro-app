/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['LoginRequest'];
        };
      };
      responses: {
        /** @description Login successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AuthResponse'];
          };
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register new user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RegisterRequest'];
        };
      };
      responses: {
        /** @description Registration successful */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AuthResponse'];
          };
        };
        400: components['responses']['BadRequestError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Refresh access token */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: {
          refreshToken?: string;
        };
      };
      requestBody?: never;
      responses: {
        /** @description Access token refreshed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AuthResponse'];
          };
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/boards': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получение списка досок пользователя */
    get: {
      parameters: {
        query?: {
          page?: number;
          limit?: number;
          sort?: 'createdAt' | 'updatedAt' | 'lastOpenedAt' | 'name';
          isFavorite?: boolean;
          search?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Список досок */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['BoardsList'];
          };
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    put?: never;
    /** Создание новой доски */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Доска создана успешно */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Board'];
          };
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/boards/{boardId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получение доски по id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          boardId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Board */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Board'];
          };
        };
        401: components['responses']['UnauthorizedError'];
        404: components['responses']['NotFoundError'];
      };
    };
    put?: never;
    post?: never;
    /** Удаление доски */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          boardId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Доска удалена успешно */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedError'];
        404: components['responses']['NotFoundError'];
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/boards/{boardId}/favorite': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Обновление доски в избранном */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          boardId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateBoardFavorite'];
        };
      };
      responses: {
        /** @description Board created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Board'];
          };
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/boards/{boardId}/rename': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Переименование доски */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          boardId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RenameBoard'];
        };
      };
      responses: {
        /** @description Board created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Board'];
          };
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    LoginRequest: {
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
    };
    User: {
      id: string;
      /** Format: email */
      email: string;
    };
    AuthResponse: {
      accessToken: string;
      user: components['schemas']['User'];
    };
    Error: {
      message: string;
      code: string;
    };
    RegisterRequest: {
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
    };
    Board: {
      id: string;
      name: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      lastOpenedAt: string;
      isFavorite: boolean;
    };
    BoardsList: {
      list: components['schemas']['Board'][];
      total: number;
      totalPages: number;
    };
    UpdateBoardFavorite: {
      isFavorite: boolean;
    };
    RenameBoard: {
      name: string;
    };
  };
  responses: {
    /** @description Unauthorized */
    UnauthorizedError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** @description Bad request */
    BadRequestError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** @description Resource not found */
    NotFoundError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
